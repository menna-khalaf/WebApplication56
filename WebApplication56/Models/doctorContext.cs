// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace WebApplication56.Models
{
    public partial class doctorContext : DbContext
    {
        public doctorContext()
        {
        }

        public doctorContext(DbContextOptions<doctorContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Adjustment> Adjustments { get; set; }
        public virtual DbSet<Adjustmenttool> Adjustmenttools { get; set; }
        public virtual DbSet<Clinic> Clinics { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<OrderedTool> OrderedTools { get; set; }
        public virtual DbSet<Tool> Tools { get; set; }
        public virtual DbSet<User> Users { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.UseCollation("utf8mb4_0900_ai_ci")
                .HasCharSet("utf8mb4");

            modelBuilder.Entity<Adjustment>(entity =>
            {
                entity.HasKey(e => e.AdjId)
                    .HasName("PRIMARY");

                entity.ToTable("adjustments");

                entity.HasIndex(e => e.Email, "Email");

                entity.Property(e => e.AdjId).HasColumnName("Adj_id");

                entity.Property(e => e.AdjDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Adj_date");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.HasOne(d => d.EmailNavigation)
                    .WithMany(p => p.Adjustments)
                    .HasForeignKey(d => d.Email)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("adjustments_ibfk_1");
            });

            modelBuilder.Entity<Adjustmenttool>(entity =>
            {
                entity.HasKey(e => new { e.AdjId, e.ToolName })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.ToTable("adjustmenttools");

                entity.HasIndex(e => e.ToolName, "Tool_name");

                entity.Property(e => e.AdjId).HasColumnName("Adj_id");

                entity.Property(e => e.ToolName)
                    .HasMaxLength(50)
                    .HasColumnName("Tool_name");

                entity.Property(e => e.ActualQuantity).HasColumnName("Actual_quantity");

                entity.Property(e => e.Because).HasMaxLength(100);

                entity.HasOne(d => d.Adj)
                    .WithMany(p => p.Adjustmenttools)
                    .HasForeignKey(d => d.AdjId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("adjustmenttools_ibfk_1");

                entity.HasOne(d => d.ToolNameNavigation)
                    .WithMany(p => p.Adjustmenttools)
                    .HasForeignKey(d => d.ToolName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("adjustmenttools_ibfk_2");
            });

            modelBuilder.Entity<Clinic>(entity =>
            {
                entity.HasKey(e => e.ClinicName)
                    .HasName("PRIMARY");

                entity.ToTable("clinic");

                entity.Property(e => e.ClinicName)
                    .HasMaxLength(100)
                    .HasColumnName("Clinic_name");

                entity.Property(e => e.ClinicId)
                    .HasMaxLength(100)
                    .HasColumnName("Clinic_id");
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.HasKey(e => e.OrdId)
                    .HasName("PRIMARY");

                entity.ToTable("orders");

                entity.HasIndex(e => e.ClinicName, "Clinic_name");

                entity.HasIndex(e => e.Email, "Email");

                entity.Property(e => e.OrdId)
                    .HasMaxLength(50)
                    .HasColumnName("Ord_id");

                entity.Property(e => e.ClinicName)
                    .HasMaxLength(100)
                    .HasColumnName("Clinic_name");

                entity.Property(e => e.Email).HasMaxLength(200);

                entity.Property(e => e.OrdDate).HasColumnName("Ord_date");

                entity.Property(e => e.Status).HasDefaultValueSql("'0'");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasColumnType("enum('توريد','شراء')");

                entity.HasOne(d => d.ClinicNameNavigation)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.ClinicName)
                    .HasConstraintName("orders_ibfk_1");

                entity.HasOne(d => d.EmailNavigation)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.Email)
                    .HasConstraintName("orders_ibfk_2");
            });

            modelBuilder.Entity<OrderedTool>(entity =>
            {
                entity.HasKey(e => new { e.OrdId, e.ToolName })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.ToTable("ordered_tools");

                entity.HasIndex(e => e.ToolName, "Tool_name");

                entity.Property(e => e.OrdId)
                    .HasMaxLength(50)
                    .HasColumnName("Ord_id");

                entity.Property(e => e.ToolName)
                    .HasMaxLength(50)
                    .HasColumnName("Tool_name");

                entity.Property(e => e.IncomingQuantity).HasColumnName("Incoming_quantity");

                entity.Property(e => e.OutgoingQuantity).HasColumnName("Outgoing_quantity");

                entity.Property(e => e.Status).HasDefaultValueSql("'0'");

                entity.HasOne(d => d.Ord)
                    .WithMany(p => p.OrderedTools)
                    .HasForeignKey(d => d.OrdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ordered_tools_ibfk_1");

                entity.HasOne(d => d.ToolNameNavigation)
                    .WithMany(p => p.OrderedTools)
                    .HasForeignKey(d => d.ToolName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ordered_tools_ibfk_2");
            });

            modelBuilder.Entity<Tool>(entity =>
            {
                entity.HasKey(e => e.ToolName)
                    .HasName("PRIMARY");

                entity.ToTable("tools");

                entity.Property(e => e.ToolName)
                    .HasMaxLength(50)
                    .HasColumnName("Tool_name");

                entity.Property(e => e.Balance).HasDefaultValueSql("'0'");

                entity.Property(e => e.Because).HasMaxLength(100);

                entity.Property(e => e.Storequantity).HasColumnName("storequantity");

                entity.Property(e => e.ToolId)
                    .HasMaxLength(50)
                    .HasColumnName("Tool_id");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasKey(e => e.Email)
                    .HasName("PRIMARY");

                entity.ToTable("user");

                entity.Property(e => e.Email).HasMaxLength(200);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Position)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}