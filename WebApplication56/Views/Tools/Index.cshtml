@model IEnumerable<WebApplication56.Models.Tool>

@{
    ViewData["Title"] = "Tool Names";
}

<!DOCTYPE html>
<html>
<head>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/StyleSheet.css">



    <style>

        body {
            margin: 0;
            padding: 0;
            font-family: Arial, sans-serif;
        }

        .container {
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
            padding-left: 50px;
            padding-bottom: 100px;
            margin-bottom: 10px;
        }

        .header {
            background-image: url("NewFolder/Untitled-1.png");
            background-size: 1550px;
            padding: 130px;
            text-align: center;
            margin-bottom: 10px;
        }

        .form {
            margin-top: 10px;
            margin-left: 300px;
            align-items: center;
            display: flex;
            width: 50%;
            height: 40%;
            padding: 3px;
            border-radius: 150px;
            background-color: rgb(255, 255, 255);
            border: 5px solid rgb(1, 41, 134);
            transition: all 0.3s ease;
        }

            .form:hover {
                transform: scale(1.05);
                box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
            }

        #searchInput {
            flex: 1;
            min-width: 0;
            background-color: inherit;
            border: none;
            outline: none;
            padding: 0px 5px;
        }

        .btnsearch {
            background-color: rgb(1, 41, 134);
            color: #ffffff;
            border-radius: 100%;
            padding: 15px;
            font-weight: 700;
            border: none;
        }

            .btnsearch:hover {
                background: -webkit-linear-gradient(rgb(255, 255, 255), rgb(3, 41, 102), rgb(255, 255, 255));
                cursor: pointer;
            }

        .card {
            margin-bottom: 3px;
            margin: 2px;
            border: 5px solid #47b5e5;
            border-radius: 10px;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

            .card:hover {
                transform: scale(1.05);
                box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
            }

        .card-title {
            margin-bottom: 0px;
            margin-top: 2px;
            font-size: 25px;
            font-weight: bold;
            text-align: center;
            font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
            color: #7b0607;
        }

        .card-footer {
            background-color: #47b5e5;
            text-align: center;
        }

        .input-group {
            background-color: rgb(white);
            margin-left: 25px;
            width: 200px; /* Adjust width as needed */
        }

        .btn {
            border: 3px solid rgb(255, 248, 248);
            text-decoration: #ffffff;
        }

            .btn:hover {
                background: -webkit-linear-gradient(rgb(255, 255, 255), #6dc1eb, #6dc1eb);
                cursor: pointer;
            }

        .save {
            background-color: #011791;
            color: #ffffff;
            font-weight: 400px;
            font-size: 21px;
            float: right;
            padding: 10px;
            position: relative;
            top: -60px;
            border-radius: 20px;
        }

        .ord {
            margin-bottom: 50px;
            color: #011791;
            font-size: 30px;
            text-align: right;
            align-items: center;
            display: flex;
            justify-content: flex-end;
            margin-right: 30px
        }

        #Ord_id {
            width: 80px;
            height: 40px;
            font-size: 100%;
            border: 5px solid #011791;
        }

        #Label {
            font-size: 35px;
            margin-left: 7px;
        }

    </style>


            </head>
<body>


    <div class="header">
        <div class="dental-icon"></div>
        <div class="dental-icon"></div>
        <div class="dental-icon"></div>
        <!-- Add more dental icons as needed -->
    </div>

    <!-- Your header and container content -->

    <div class="container">
        <div class="form">

            <input type="text" id="searchInput" placeholder="Search">
            <input type="submit" value="search" class="btnsearch">

        </div>
        <div>
            <button class="save" type="submit" onclick="saveOrder()" id="insertButton">حفظ الطلب</button>
        </div>


        <form>
            <!-- Your ord_id input -->
            <!-- Remaining HTML code -->
         @*    <p>OrdId: @ViewBag.OrdId</p> *@

            <div class="row row-cols-1 row-cols-md-6 g-4" id="productGrid">
                @foreach (var tool in Model)
                {
                    <div class="col">
                        <div class="card">
                            <div class="card-body bg-white">
                                <h5 class="card-title text-center">@tool.ToolName</h5>
                            </div>

                            <div class="card-footer">
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <button class="btn" type="button" onclick="decrement(this, '@tool.ToolName')">-</button>
                                    </div>
                                    <input type="text" class="form-control form-control-color" value="0" id="@tool.ToolName">
                                    <div class="input-group-append">
                                        <button class="btn" type="button" onclick="increment(this, '@tool.ToolName')">+</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <div id="redirect" class="element">
                <a href="#" onclick="redirectToSelectedElementsPage()" style="background-color: #4CAF50; color: white; text-decoration: none; padding: 10px 20px; display: inline-block; border-radius: 0%;">انشاء طلب>></a>
            </div>
        </form>
    </div>
   @*  <button class="btn btn-primary" id="insertButton">Insert</button> *@
    <script>
        // Object to store selected tools and their quantities
        const quantities = {};

        function increment(element, toolName) {
            const inputField = element.parentNode.previousElementSibling;
            let value = parseInt(inputField.value);
            inputField.value = ++value;
            quantities[toolName] = value;
        }

        function decrement(element, toolName) {
            const inputField = element.parentNode.nextElementSibling;
            let value = parseInt(inputField.value);
            if (value > 0) {
                inputField.value = --value;
                quantities[toolName] = value;
            }
        }

        // // Function to redirect to the selected elements page
        // function redirectToSelectedElementsPage() {
        //     // Create a URL parameter string with selected elements and quantities
        //     let params = Object.entries(quantities)
        //         .filter(([element, quantity]) => quantity > 0)
        //         .map(([element, quantity]) => `${encodeURIComponent(element)}=${encodeURIComponent(quantity)}`)
        //         .join('&');

        //     // Redirect to the new page with the selected elements and quantities
        //     window.location.href = `/selectedElementsPage.html?${params}`;
        // }







        //             document.getElementById('insertButton').addEventListener('click', insert);
        //         function insert() {
        //             const orderedTools = [];
        //             const cards = document.querySelectorAll('.card');

        //             cards.forEach(card => {
        //                 const quantity = parseInt(card.querySelector('.form-control').value);
        //                 if (quantity > 0) {
        //                     const toolName = card.querySelector('.card-title').textContent.trim();
        //                     orderedTools.push({ OrderId: '@ViewBag.OrdId', ToolName: toolName, Quantity: quantity });
        //                 }
        //             });

        //             // Log the ordered tools before sending the request
        //             console.log('Ordered Tools:', orderedTools);

        //             fetch('/Tools/Insertion', {
        //                 method: 'POST',
        //                 headers: {
        //                     'Content-Type': 'application/json'
        //                 },
        //                 body: JSON.stringify(orderedTools)
        //             })
        //                 .then(response => {
        //                     if (response.ok) {
        //                         // Insert successful
        //                         alert('Ordered tools inserted successfully.');
        //                     } else {
        //                         // Insert failed
        //                         alert('Failed to insert ordered tools.');
        //                     }
        //                 })
        //                 .catch(error => {
        //                     console.error('Error:', error);
        //                     alert('An error occurred while inserting ordered tools.');
        //                 });
        //         }










        const searchInput = document.getElementById('searchInput');
        const cards = document.querySelectorAll('.card');

        searchInput.addEventListener('input', function () {
            const searchTerm = searchInput.value.trim().toLowerCase();

            cards.forEach(card => {
                const cardTitle = card.querySelector('.card-title').textContent.trim().toLowerCase();
                if (cardTitle.includes(searchTerm)) {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });
        });



        function updateQuantity(input) {
            let quantity = parseInt(input.value);
            if (isNaN(quantity) || quantity < 0) {
                quantity = 0;
            }
            input.value = quantity;
        }







        function insert() {
            const orderedTools = [];
            const cards = document.querySelectorAll('.card');

            cards.forEach(card => {
                const quantity = parseInt(card.querySelector('.form-control').value);
                if (quantity > 0) {
                    const toolName = card.querySelector('.card-title').textContent.trim();
                    orderedTools.push({ ToolName: toolName, Quantity: quantity });
                }
            });

            // Log the ordered tools before sending the request
            console.log('Ordered Tools:', orderedTools);

            fetch('/Tools/Insertion', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(orderedTools)
            })
                .then(response => {
                    if (response.ok) {
                        // Redirect to the selected elements page with ordered tools
                        redirectToSelectedElementsPage(orderedTools);
                    } else {
                        // Insert failed
                        console.error('Failed to insert ordered tools.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }

        // Function to redirect to the selected elements page with ordered tools
        function redirectToSelectedElementsPage(orderedTools) {
            // Create a URL parameter string with selected elements and quantities
            let params = orderedTools.map(tool => `${encodeURIComponent(tool.ToolName)}=${encodeURIComponent(tool.Quantity)}`).join('&');

            // Redirect to the new page with the selected elements and quantities
            window.location.href = `/selectedElementsPage.html?${params}`;
        }

        document.getElementById('insertButton').addEventListener('click', insert);


    </script>
</body>
</html>
